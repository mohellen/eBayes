#ifndef TOOLS_CONIFG_HPP_
#define TOOLS_CONIFG_HPP_

#include <string>
#include <vector>

class Config {
public:
	// Singleton pattern to prevent multiple instances (only 1 instance allowed)
	static Config& getInstance(int argc, char** argv)
	{
		static Config& cfg = new Config(argc, argv);
		return cfg;
	}

private:
	// General setting
	bool gen_isResumeJob = false;			// For a resumed job, grid will be loaded from files in output path
	std::string gen_input_file = "";				// Input file to be loaded
	std::string gen_output_path = "./output";	// Output path
	std::vector<double> gen_observedData;
	double gen_noiseInData = 0.2;		// Noise level in [0.0, 1.0]: 0 - no noise, 1.0 - 100% noise.

	// iMPI setting
	size_t impi_adaptFreqInSeconds = 60;	// call probe_adapt every N seconds

	// Surrogate SGI setting
	bool sgi_isMasterWorker = true;			// Construct surrogate using Master-Worker style (iMPI or MPI), or SIMD style (MPI only)
	size_t sgi_masterWorkerTrunkSize = 10;	// Num grid points to compute in a job

	// MCMC setting
	bool mcmc_isOutputProgress = false; 	// Eable MCMC progress output
	size_t mcmc_outputFreqInSteps = 1000;	// Print progress in every N MCMC steps
	size_t mcmc_numChains = 20;				// Number of MCMC chains for

	// Model NS setting
	double ns_domainSizeX = 10.0;
	double ns_domainSizeY = 2.0;
	size_t ns_minNumCellsX = 100;
	size_t ns_minNumCellsY = 20;
	double ns_initVelocityX = 1.0;
	double ns_initVelocityY = 0.0;
	double ns_initPressure = 0.0;
	double ns_inletVelocityX = 1.0;
	double ns_inletVelocityY = 0.0;
	double ns_externalForceX = 0.0;
	double ns_externalForceY = 0.0;
	double ns_Re = 100.0;	// Reynolds number
	double ns_tau = 0.5;	// time step stability factor
	double ns_alpha = 0.9;	// Upwind dfferencing factor
	double ns_omega = 1.0;	// Pressure related
	std::string ns_BoundaryTypeNorth = "noslip"; // Types: inlet, outlet, noslip, freeslip
	std::string ns_BoundaryTypeSouth = "noslip"; // Types: inlet, outlet, noslip, freeslip
	std::string ns_BoundaryTypeEast  = "outlet"; // Types: inlet, outlet, noslip, freeslip
	std::string ns_BoundaryTypeWest  = "inlet";	 // Types: inlet, outlet, noslip, freeslip
	std::vector<double> ns_obstacleList;
	std::vector<double> ns_outputTimeList;
	std::vector<double> ns_outputLocationList;
		

private:
	Config(int argc, char** argv); // private constructor to prevent more than 1 inst
	
public:
	// c++11: disable copy/other constructors 
	// Note: deleted functions should be made public for better error messege
	Config() = delete;
	Config(Config const&) = delete;
	void operator=(Config const&) = delete;
};
#endif
